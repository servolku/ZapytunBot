import sys
import os
import json
import logging
import math
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from database.models import get_or_create_user, update_score, get_leaderboard

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
USER_SESSION = {}

def load_questions():
    """–î–∏–Ω–∞–º—ñ—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –ø–∏—Ç–∞–Ω—å."""
    file_path = "bot/questions.json"
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    with open(file_path, "r") as f:
        data = json.load(f)
        return data

def haversine(lat1, lon1, lat2, lon2):
    """–û–±—á–∏—Å–ª—é—î –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ (GPS) —É –º–µ—Ç—Ä–∞—Ö."""
    R = 6371000  # –†–∞–¥—ñ—É—Å –ó–µ–º–ª—ñ –≤ –º–µ—Ç—Ä–∞—Ö
    phi1 = math.radians(lat1)
    phi2 = math.radians(lat2)
    delta_phi = math.radians(lat2 - lat1)
    delta_lambda = math.radians(lon2 - lon1)
    a = math.sin(delta_phi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Received /start command from user: {update.effective_user.id}")
    user = update.effective_user
    get_or_create_user(user.id, user.first_name)

    questions_data = load_questions()
    quest_name = questions_data.get("quest_name", "–ö–≤–µ—Å—Ç")

    main_keyboard = ReplyKeyboardMarkup(
        [["–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! –ì–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏ ¬´{quest_name}¬ª?\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ '–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è', —â–æ–± –ø–æ—á–∞—Ç–∏.",
        reply_markup=main_keyboard
    )

async def handle_get_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è."""
    user_id = update.effective_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in USER_SESSION:
        USER_SESSION[user_id] = {"current_question": 0, "score": 0}

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
    questions = load_questions()
    question_index = USER_SESSION[user_id]["current_question"]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è
    if question_index >= len(questions):
        await update.message.reply_text(
            "–í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ñ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start."
        )
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø–∏—Ç—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
    location_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)]],
        resize_keyboard=True,  # –†–æ–±–∏—Ç—å –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∫–æ–º–ø–∞–∫—Ç–Ω—ñ—à–æ—é
        one_time_keyboard=True  # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–Ω–∏–∫–Ω–µ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é.",
        reply_markup=location_keyboard
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é, —è–∫—É –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á."""
    user_location = update.message.location
    user_id = update.effective_user.id

    if not user_location:
        await update.message.reply_text("‚ùå –í–∏ –Ω–µ –Ω–∞–¥–∞–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in USER_SESSION:
        USER_SESSION[user_id] = {"current_question": 0, "score": 0}

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
    questions = load_questions()
    question_index = USER_SESSION[user_id]["current_question"]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è
    if question_index >= len(questions):
        await update.message.reply_text(
            "–í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ñ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start."
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    target_question = questions[question_index]
    target_lat = target_question.get("latitude")
    target_lon = target_question.get("longitude")

    if not target_lat or not target_lon:
        await update.message.reply_text("‚ùå –î–ª—è —Ü—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–∞–¥–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
        return

    distance = haversine(user_location.latitude, user_location.longitude, target_lat, target_lon)
    if distance <= 10:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
        options = target_question["options"]
        keyboard = [
            [InlineKeyboardButton(option, callback_data=str(idx))]
            for idx, option in enumerate(options)
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(target_question["question"], reply_markup=reply_markup)
    else:
        await update.message.reply_text(
            f"‚ùå –í–∏ –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—è –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –ª–æ–∫–∞—Ü—ñ—ó. –í–∞—à–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ü—ñ–ª—ñ: {int(distance)} –º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /leaderboard."""
    leaderboard_data = get_leaderboard()
    leaderboard_text = "üèÜ –î–æ—à–∫–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ üèÜ\n\n"
    for idx, (name, score) in enumerate(leaderboard_data, start=1):
        leaderboard_text += f"{idx}. {name}: {score} –±–∞–ª—ñ–≤\n"
    await update.message.reply_text(leaderboard_text)

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /leaderboard."""
    leaderboard_data = get_leaderboard()
    leaderboard_text = "üèÜ –î–æ—à–∫–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ üèÜ\n\n"
    for idx, (name, score) in enumerate(leaderboard_data, start=1):
        leaderboard_text += f"{idx}. {name}: {score} –±–∞–ª—ñ–≤\n"
    await update.message.reply_text(leaderboard_text)

async def ask_question(update, context, new_session=False):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."""
    user_id = update.effective_user.id
    if new_session or user_id not in USER_SESSION:
        USER_SESSION[user_id] = {"current_question": 0, "score": 0}

    # –î–∏–Ω–∞–º—ñ—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
    questions = load_questions()
    question_index = USER_SESSION[user_id]["current_question"]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è
    if question_index >= len(questions):
        await update.message.reply_text(
            f"–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–≤—ñ–π –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {USER_SESSION[user_id]['score']} –±–∞–ª—ñ–≤.\n"
            "–ù–∞—Ç–∏—Å–Ω–∏ '–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è', —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É."
        )
        update_score(user_id, USER_SESSION[user_id]["score"])
        del USER_SESSION[user_id]
        return

    question = questions[question_index]
    options = question["options"]

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    keyboard = [
        [InlineKeyboardButton(option, callback_data=str(idx))]
        for idx, option in enumerate(options)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(question["question"], reply_markup=reply_markup)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Å—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ—Å–Ω—É—î
    if user_id not in USER_SESSION:
        await query.edit_message_text(text="‚ùå –ü–æ–º–∏–ª–∫–∞: –°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –î–∏–Ω–∞–º—ñ—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
    questions = load_questions()
    question_index = USER_SESSION[user_id]["current_question"]
    question = questions[question_index]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if int(query.data) == question["correct"]:
        USER_SESSION[user_id]["score"] += 1
        response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        response = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!"

    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await query.edit_message_text(text=response)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    USER_SESSION[user_id]["current_question"] += 1
    await update.callback_query.message.reply_text("–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó.")
