import sys
import os
import json
import logging
from geopy.distance import geodesic  # –î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database.models import get_or_create_user, update_score, get_leaderboard

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
USER_SESSION = {}

def load_questions():
    """–î–∏–Ω–∞–º—ñ—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –ø–∏—Ç–∞–Ω—å."""
    file_path = "bot/questions.json"
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    with open(file_path, "r") as f:
        questions = json.load(f)
        return questions

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start."""
    logger.info(f"Received /start command from user: {update.effective_user.id}")
    user = update.effective_user
    get_or_create_user(user.id, user.first_name)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! –ì–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∫–≤–µ—Å—Ç?\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–û–¢–†–ò–ú–ê–¢–ò –ü–ò–¢–ê–ù–ù–Ø", callback_data="get_question")]
        ])
    )
async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /leaderboard."""
    leaderboard_data = get_leaderboard()
    leaderboard_text = "üèÜ –î–æ—à–∫–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ üèÜ\n\n"
    for idx, (name, score) in enumerate(leaderboard_data, start=1):
        leaderboard_text += f"{idx}. {name}: {score} –±–∞–ª—ñ–≤\n"
    await update.message.reply_text(leaderboard_text)

async def handle_get_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–û–¢–†–ò–ú–ê–¢–ò –ü–ò–¢–ê–ù–ù–Ø'."""
    query = update.callback_query
    await query.answer()

    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é
    await query.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)]
        ])
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é, —è–∫—É –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á."""
    user_location = update.message.location
    if not user_location:
        await update.message.reply_text("‚ùå –í–∏ –Ω–µ –Ω–∞–¥–∞–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    user_id = update.effective_user.id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    if user_id not in USER_SESSION:
        USER_SESSION[user_id] = {"current_question": 0, "score": 0}

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
    questions = load_questions()
    question_index = USER_SESSION[user_id]["current_question"]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è
    if question_index >= len(questions):
        await update.message.reply_text(
            "–ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ñ. –ü–æ—á–Ω—ñ—Ç—å –Ω–æ–≤—É –≥—Ä—É."
        )
        return

    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    target_question = questions[question_index]
    target_lat = target_question.get("latitude")
    target_lon = target_question.get("longitude")

    if target_lat is None or target_lon is None:
        await update.message.reply_text("‚ùå –î–ª—è —Ü—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–∞–¥–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó —Ç–æ—á–∫–∏
    user_coords = (user_location.latitude, user_location.longitude)
    target_coords = (target_lat, target_lon)

    distance = geodesic(user_coords, target_coords).meters
    if distance > 20:
        await update.message.reply_text(
            f"‚ùå –í–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–∞–ª–µ–∫–æ –≤—ñ–¥ —Ü—ñ–ª—å–æ–≤–æ—ó —Ç–æ—á–∫–∏. –í—ñ–¥—Å—Ç–∞–Ω—å: {distance:.2f} –º–µ—Ç—Ä—ñ–≤. –ü—ñ–¥—Ö–æ–¥—å—Ç–µ –±–ª–∏–∂—á–µ!"
        )
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –º–µ–∂–∞—Ö 20 –º–µ—Ç—Ä—ñ–≤, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
    options = target_question["options"]
    keyboard = [
        [InlineKeyboardButton(option, callback_data=str(idx))]
        for idx, option in enumerate(options)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"‚úÖ –í–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –º—ñ—Å—Ü—ñ! –û—Å—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:\n\n{target_question['question']}",
        reply_markup=reply_markup
    )
